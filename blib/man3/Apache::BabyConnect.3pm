.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Apache::BabyConnect 3"
.TH Apache::BabyConnect 3 "2007-06-29" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Apache::BabyConnect \- uses DBI::BabyConnect to initiate persistent database connections
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& # Configuration in perl.conf and startup.pl:
.Ve
.PP
.Vb 2
\& PerlSetEnv BABYCONNECT /opt/DBI-BabyConnect/configuration
\& PerlRequire /opt/Apache-BabyConnect/startupscripts/babystartup.pl
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module initiates a persistent database connection using DBI::BabyConnect.
.PP
The database access uses Perl's DBI::BabyConnect. For a roadmap on using this
module, see the \s-1README\s0.TXT
.PP
When loading the Apache::BabyConnect module, the
module looks if the environment variable \s-1BABYCONNECT\s0 has been set to the
\&\s-1URI\s0 location where it can read the configuration files, and if the 
the module DBI::BabyConnect has been loaded.
The startup script instantiates DBI::BabyConnect objects with caching
and persistence enabled. Each object is connected to a data source
as described by the descriptor.
.PP
If you create a DBI::BabyConnect object from a Perl script, then if the
descriptor is found in the DBI::BabyConnect cache, you will be using
the cached object. Otherwise, a new DBI::BabyConnect is created with that
descriptor, and it is added to the cache.
.PP
Any Perl script use DBI::BabyConnect to create as many objects, however,
DBI::BabyConnect will only create a new object if not found in the cache.
Programmers do not need to keep track of what is being cached, and they
can write code as if the script is to be run from the command prompt.
.PP
Unlike the Apache::DBI module, there is no request forwarding between
the \s-1DBI\s0 module and the Apache::BabyConnect. All caching is handled by the
DBI::BabyConnect. \fBDo not load the Apache::DBI module\fR whenever you are using
Apache::BabyConnect, otherwise you will imply a penalty on the caching
mechanism, and you will be limited to the caching mechanism of Apache::DBI.
.PP
The Apache::BabyConnect module does not have the same limitation as Apache::DBI.
DBI::BabyConnect objects are persisted on per process basis, and a user can 
access several times a database from different http servers. The Apache::BabyConnect
objects will never share the same handle. Each Apache::BabyConnect object
contains its own handle, and DBI::db handle are never cached or shared. For this
reason \fByou should not load the Apache::DBI module\fR.
.PP
Caching of the Apache::BabyConnect is maintained within the DBI::BabyConnect
module itself, and the each entry in the cache is uniquely identified by the
concatenation of: the kernel process number of the http server + the database
descriptor.
.SH "CONFIGURATION"
.IX Header "CONFIGURATION"
Before loading the module, you need to setup the \s-1BABYCONNECT\s0 environment
variable to point to the DBI::BabyConnect configuration directory. After,
setting the environment variable \s-1BABYCONNECT\s0, you should load the
Apache::BabyConnect upon startup of the Apache daemon.
.PP
Add the following line to your perl.conf:
.PP
.Vb 2
\& PerlSetEnv BABYCONNECT /p9/BABYCONNECT/DBI-BabyConnect/configuration
\& PerlRequire /p9/BABYCONNECT/Apache-BabyConnect/startupscripts/babystartup.pl
.Ve
.PP
Write a startup script to be loaded via the PerlRequire directive. For example,
the \*(L"babystartup.pl\*(R".
 PerlModule Apache::DBI
.PP
You do not need to load the \s-1DBI\s0 module.
.PP
There is only one method call that you need to use to achieve a persistent
connection upon server startup:
.PP
.Vb 1
\& Apache::BabyConnect->connect_on_init($datasource_descriptor [,$stderr_log] [,$trace_log] [,$trace_level]);
.Ve
.SH "babystartup.pl"
.IX Header "babystartup.pl"
use strict;
.PP
$ENV{\s-1MOD_PERL\s0} or die \*(L"not running under mod_perl!\*(R";
.PP
.Vb 2
\& use ModPerl::Registry ();
\& use LWP::UserAgent ();
.Ve
.PP
.Vb 1
\& use Apache::BabyConnect ();
.Ve
.PP
.Vb 2
\& use Carp ();
\& $SIG{__WARN__} = \e&Carp::cluck;
.Ve
.PP
.Vb 1
\& $Apache::BabyConnect::DEBUG = 2;
.Ve
.PP
.Vb 4
\& #ATTENTION: this is only a sample example to test with Apache::BabyConnect,
\& #  in production environment, do not enable logging and tracing. To do so
\& #  just call connect_on_init() with the database descriptor only. For example:
\& #Apache::BabyConnect->connect_on_init('BABYDB_001');
.Ve
.PP
.Vb 6
\& Apache::BabyConnect->connect_on_init(
\&        'BABYDB_001',
\&        '/var/www/htdocs/logs/error_BABYDB_001.log',
\&        '/var/www/htdocs/logs/db_BABYDB_001.log',
\&        2
\& );
.Ve
.PP
.Vb 6
\& Apache::BabyConnect->connect_on_init(
\&        'BABYDB_002',
\&        '/var/www/htdocs/logs/error_BABYDB_002.log',
\&        '/var/www/htdocs/logs/db_BABYDB_002.log',
\&        2
\& );
.Ve
.PP
.Vb 6
\& Apache::BabyConnect->connect_on_init(
\&        'BABYCONNECT_003',
\&        '/var/www/htdocs/logs/error_BABYDB_003.log',
\&        '/var/www/htdocs/logs/db_BABYDB_003.log',
\&        2
\& );
.Ve
.PP
.Vb 6
\& Apache::BabyConnect->connect_on_init(
\&        'BABYCONNECT_004',
\&        '/var/www/htdocs/logs/error_BABYDB_004.log',
\&        '/var/www/htdocs/logs/db_BABYDB_004.log',
\&        2
\& );
.Ve
.PP
.Vb 1
\& 1;
.Ve
.SH "PREREQUISITES"
.IX Header "PREREQUISITES"
.Sh "\s-1MOD_PERL\s0 2.0"
.IX Subsection "MOD_PERL 2.0"
Apache::DBI version 0.96 and higher should work under mod_perl 2.0 \s-1RC5\s0 and later
with httpd 2.0.49 and later.
.Sh "\s-1MOD_PERL\s0 1.0 Note that this module needs mod_perl\-1.08 or higher, apache_1.3.0."
.IX Subsection "MOD_PERL 1.0 Note that this module needs mod_perl-1.08 or higher, apache_1.3.0."
.SH "SEE ALSO"
.IX Header "SEE ALSO"
DBI::BabyConnect, \s-1DBI\s0
.SH "AUTHORS"
.IX Header "AUTHORS"
.RE
.IP "* Bassem W. Jamaleddine is the original author of Apache::BabyConnect."
.IX Item "Bassem W. Jamaleddine is the original author of Apache::BabyConnect."
.RE
.PD 0
.IP "* mod_perl by Doug MacEachern."
.IX Item "mod_perl by Doug MacEachern."
.RE
.IP "* \s-1DBI\s0 by Tim Bunce <dbi\-users\-subscribe@perl.org>"
.IX Item "DBI by Tim Bunce <dbi-users-subscribe@perl.org>"
.PD
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
The Apache::BabyConnect module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
